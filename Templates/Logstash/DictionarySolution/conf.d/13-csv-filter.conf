filter {

if "IQ-CSV" in [tags]
{

csv {
      autogenerate_column_names => "false"
      separator => ","
      columns => 
["iqFLOW","iqprobeNum","iqmonPort","iqtransportNum","iqtuple","iqvlan","iqalias","iqsourceIp","iqsourcePort","iqdestIp","iqdestPort","iqchannel","iqfrequency","iqivlNumber","iqivlDateTimeGMT","iqflowStatus","iqpayloadStatus","iqalarmMap","iqalarmTypeMap","iqflowBitRateMin","iqflowBitRateMax","iqflowDf","iqoutageCount","iqoutageSeconds","iqmlrCount","iqdfCount","iqipsbrMinCount","iqipsbrMaxCount","iqrtpLdCount","iqrtpLpCount","iqvideoLossCount","iqtspidCount","iqvtsbCount","iqtspidMaxCount","iqigmpZapCount","iqpcrBitRate","iqsyncErrors","iqmlt24","iqmls24","iqrtpLoss","iqrtpMaxLp","iqrtpMinLd","iqrtpSe24","iqrtpLs24","iquserButton15","iqretryCount","iqfullfilmentCount","iqpidsMonitored","iqpidsAlarmed","iqvideoPidsMonitored","iqaudioPidsMonitored","iqcontrolPidsMonitored","iqlossPidsMonitored","iqcfgMediaType","iqcfgBandwidth","iqigmpJoinTime","iqmlt15","iqmlrMax","iqmls15","iqrtpLossEventCount","iqrtpLossPacketCount","iqrtpLs","iqess","iqsess","iquass","iqscanSeconds","iqscanCount","iqscanFails","iqminSnr15","iqerrorsRsco","iqerrorsRsunco","iqerrorsRsco24","iqerrorsRsunco24","iqsdvBandwidthMin","iqsdvBandwidthMax","iqsdvBandwidthAvg","iqsdvMode","iqsdvConfigMaxBw","iqminPwr","iqmaxPwr","iqminPreBER","iqmaxPreBER","iqavgPreBER","iqminPostBER","iqmaxPostBER","iqavgPostBER","iqvtsbMax","iqvtsbMin","iqProgramCount","iqProgramsMonitored","iqProgramsFaulted","iqStuffingBitRateMin","iqStuffingBitRateMax","iqStuffingBitRateAvg","iqunreferencedPidCount","iqtos","iqtosChanges15","iqtosChanges24","iqmaxSnr15","iqavgSnr15"]

}

#Drop column names
if [iqalias] == "alias" { drop {} }
if [iqFLOW] != "FLOW" { drop {} }

#Add names to probe ID numbers
if [iqprobeNum] == "1" { mutate { add_field => { 
	"iqprobeName" => "Fish-VBR1/ G1T2"
	"iqOffice"	=>	"Fish"
	"iqOfficeType"	=>	"Fish"
	"iqASPos"	=>	"PRE-AS"
	"State"	=>	"AU"
	"City"	=>	"Atlantis"
	} } }
else if [iqprobeNum] == "3" { mutate { add_field => { 
	"iqprobeName" => "SHO-LSH1/G10"
	"iqOffice"	=>	"SHO"
	"iqOfficeType"	=>	"SHO"
	"iqASPos"	=>	"POST-AS"
	"State"	=>	"AU"
	"City"	=>	"Atlantis"	
	} } }
else if [iqprobeNum] == "5" { mutate { add_field => { 
	"iqprobeName" => "Fish-G2X"
	"iqOffice"	=>	"Fish"
	"iqOfficeType"	=>	"Fish"
	"iqASPos"	=>	"PRE-AS"
	"State"	=>	"AU"
	"City"	=>	"Atlantis"
	} } }
else if [iqprobeNum] == "17" { mutate { add_field => { 
	"iqprobeName" => "Moon-DVA"
	"iqOffice"	=>	"VHO11"
	"iqOfficeType"	=>	"VHO"
	"iqASPos"	=>	"PRE-AS"
	"State"	=>	"MO"
	"City"	=>	"Moon"
	} } }
else if [iqprobeNum] == "19" { mutate { add_field => { 
	"iqprobeName" => "Fish-VBR1-DVA"
	"iqOffice"	=>	"Fish"
	"iqOfficeType"	=>	"Fish"
	"iqASPos"	=>	"PRE-AS"
	"State"	=>	"AU"
	"City"	=>	"Atlantis"
	} } }
else if [iqprobeNum] == "20" { mutate { add_field => { 
	"iqprobeName" => "SH0-LSH3/LSH4-DVA"
	"iqOffice"	=>	"SHO"
	"iqOfficeType"	=>	"SHO"
	"iqASPos"	=>	"PRE-AS"
	"State"	=>	"AU"
	"City"	=>	"Atlantis"
	} } }
else if [iqprobeNum] == "21" { mutate { add_field => { 
	"iqprobeName" => "VHO11 G10"
	"iqOffice"	=>	"VHO11"
	"iqOfficeType"	=>	"VHO"
	"iqASPos"	=>	"POST-AS"
	"State"	=>	"MO"
	"City"	=>	"Moon"
	} } }
else if [iqprobeNum] == "22" { mutate { add_field => { 
	"iqprobeName" => "Twin Peaks DVA"
	"iqOffice"	=>	"Twin Peaks VSO"
	"iqOfficeType"	=>	"VSO"
	"iqASPos"	=>	"PRE-AS"
	"State"	=>	"XU"
	"City"	=>	"Twin Peaks"
	} } }
else if [iqprobeNum] == "23" { mutate { add_field => { 
	"iqprobeName" => "Twin Peaks G10"
	"iqOffice"	=>	"Twin Peaks VSO"
	"iqOfficeType"	=>	"VSO"
	"iqASPos"	=>	"POST-AS"
	"State"	=>	"XU"
	"City"	=>	"Twin Peaks"
	} } }
else { mutate { add_tag => [ "Missing_Probe_Name" ] } }




#Makes back-dated data work, set to GMT
date {
        match => [ "iqivlDateTimeGMT", "YYYY MMM dd HH:mm" ]
        timezone => [ "GMT" ]
        }

grok {
        match => [ "iqivlDateTimeGMT", "%{YEAR:iqyear} %{MONTH:iqmonth} %{MONTHDAY:iqday} %{HOUR:iqhour}:%{MINUTE:iqminute}" ]
}

#Add tag for maintenance window (in GMT)
if [iqhour] == "05" { mutate { add_tag => "maintenance_window" } }
if [iqhour] == "06" { mutate { add_tag => "maintenance_window" } }
if [iqhour] == "07" { mutate { add_tag => "maintenance_window" } }
if [iqhour] == "08" { mutate { add_tag => "maintenance_window" } }
if [iqhour] == "09" { mutate { add_tag => "maintenance_window" } }
if [iqhour] == "10" { mutate { add_tag => "maintenance_window" } }

if [iqmonth] == "Jan" { mutate { add_field => { "iqmonthnum" => "01" } } }
else if [iqmonth] == "Feb" { mutate { add_field => { "iqmonthnum" => "02" } } }
else if [iqmonth] == "Mar" { mutate { add_field => { "iqmonthnum" => "03" } } }
else if [iqmonth] == "Apr" { mutate { add_field => { "iqmonthnum" => "04" } } }
else if [iqmonth] == "May" { mutate { add_field => { "iqmonthnum" => "05" } } }
else if [iqmonth] == "Jun" { mutate { add_field => { "iqmonthnum" => "06" } } }
else if [iqmonth] == "Jul" { mutate { add_field => { "iqmonthnum" => "07" } } }
else if [iqmonth] == "Aug" { mutate { add_field => { "iqmonthnum" => "08" } } }
else if [iqmonth] == "Sep" { mutate { add_field => { "iqmonthnum" => "09" } } }
else if [iqmonth] == "Oct" { mutate { add_field => { "iqmonthnum" => "10" } } }
else if [iqmonth] == "Nov" { mutate { add_field => { "iqmonthnum" => "11" } } }
else if [iqmonth] == "Dec" { mutate { add_field => { "iqmonthnum" => "12" } } }

mutate { add_field => { "datedict" => "%{iqyear}%{iqmonthnum}%{iqday}%{iqhour}%{iqminute}" } }
mutate {convert => ["datedict", "float"]}

#Set fields to correct data type
mutate {convert => ["iqFLOW", "string"]}
mutate {convert => ["iqprobeNum", "float"]}
mutate {convert => ["iqmonPort", "float"]}
mutate {convert => ["iqtransportNum", "float"]}
mutate {convert => ["iqtuple", "string"]}


#NOT NEEDED... Already in CSV
#grok {
#    match => { "iqtuple" => "\[%{IP:iqsrcip}\]_\[%{INT:iqsrcprt}\]_\[%{IP:iqdstip}\]_\[%{INT:iqdstprt}\]" }
#}

#Fix IPs - BEFORE running translate
mutate {
	gsub => [
		"iqsourceIp", "(?:^|\.)0+(?=\d)", ".",
		"iqsourceIp", "^[.]", "",
                "iqdestIp", "(?:^|\.)0+(?=\d)", ".",
                "iqdestIp", "^[.]", ""

	]
}


#######################################Translate Section##########################################

#translate - Add tags per dictionary file by destination MCA
#if [iqASPos] == "POST-AS" {
#
#	#Not needed
#	#mutate { add_field => { "post-a-translate" => "%{iqdestIp}" }}
#
#	translate {
#		fallback => "no_dictionary_match"
#		dictionary_path => "/etc/logstash/dictionary/dst_mca_posta.json"
#		field => "iqdestIp"
#		destination => "post-a-translate"
#	}
#	
#	csv {
#     autogenerate_column_names => "false"
#    separator => ","
#	  skip_empty_columns => "true"
#	  source => "post-a-translate"
#      	columns =>	["vsoProcessDescription","iqChType","chLAI","HEVC","iqASEgressBR","mrBranch","iqLocality","mrASERVER"]
#	  }	  
#
#
#}
#
##translate - Add tags per dictionary file by destination MCA
#if [iqASPos] == "PRE-AS" {
#
#        #Not needed
#        #mutate { add_field => { "pre-a-translate" => "%{iqdestIp}" }}
#
#        translate {
#                fallback => "no_dictionary_match"
#                dictionary_path => "/etc/logstash/dictionary/dst_mca_prea.json"
#                field => "iqdestIp"
#                destination => "pre-a-translate"
#        }
#
#        csv {
#      autogenerate_column_names => "false"
#      separator => ","
#          skip_empty_columns => "true"
#          source => "pre-a-translate"
#        columns =>      ["vsoProcessDescription","iqChType","chLAI","HEVC","iqASEgressBR","mrBranch","iqLocality","mrASERVER"]
#          }
#
#
#}



if [iqsourceIp] == "10.11.12.13" { mutate { add_field => { "iqPostMSP" => "TRUE" }}}


mutate {convert => ["iqvlan", "float"]}
mutate {convert => ["iqalias", "string"]}
mutate {convert => ["iqsourceIp", "string"]}
mutate {convert => ["iqsourcePort", "float"]}
mutate {convert => ["iqdestIp", "string"]}
mutate {convert => ["iqdestPort", "float"]}
mutate {convert => ["iqchannel", "float"]}
mutate {convert => ["iqfrequency", "float"]}
mutate {convert => ["iqivlNumber", "float"]}
mutate {convert => ["iqivlDateTimeGMT", "string"]}
mutate {convert => ["iqflowStatus", "float"]}
mutate {convert => ["iqpayloadStatus", "float"]}
mutate {convert => ["iqalarmMap", "float"]}
mutate {convert => ["iqalarmTypeMap", "float"]}
mutate {convert => ["iqflowBitRateMin", "float"]}
mutate {convert => ["iqflowBitRateMax", "float"]}
mutate {convert => ["iqflowDf", "float"]}
mutate {convert => ["iqoutageCount", "float"]}
mutate {convert => ["iqoutageSeconds", "float"]}
mutate {convert => ["iqmlrCount", "float"]}
mutate {convert => ["iqdfCount", "float"]}
mutate {convert => ["iqipsbrMinCount", "float"]}
mutate {convert => ["iqipsbrMaxCount", "float"]}
mutate {convert => ["iqrtpLdCount", "float"]}
mutate {convert => ["iqrtpLpCount", "float"]}
mutate {convert => ["iqvideoLossCount", "float"]}
mutate {convert => ["iqtspidCount", "float"]}
mutate {convert => ["iqvtsbCount", "float"]}
mutate {convert => ["iqtspidMaxCount", "float"]}
mutate {convert => ["iqigmpZapCount", "float"]}
mutate {convert => ["iqpcrBitRate", "float"]}
mutate {convert => ["iqsyncErrors", "float"]}
mutate {convert => ["iqmlt24", "float"]}
mutate {convert => ["iqmls24", "float"]}
mutate {convert => ["iqrtpLoss", "float"]}
mutate {convert => ["iqrtpMaxLp", "float"]}
mutate {convert => ["iqrtpMinLd", "float"]}
mutate {convert => ["iqrtpSe24", "float"]}
mutate {convert => ["iqrtpLs24", "float"]}
mutate {convert => ["iquserButton15", "float"]}
mutate {convert => ["iqretryCount", "float"]}
mutate {convert => ["iqfullfilmentCount", "float"]}
mutate {convert => ["iqpidsMonitored", "float"]}
mutate {convert => ["iqpidsAlarmed", "float"]}
mutate {convert => ["iqvideoPidsMonitored", "float"]}
mutate {convert => ["iqaudioPidsMonitored", "float"]}
mutate {convert => ["iqcontrolPidsMonitored", "float"]}
mutate {convert => ["iqlossPidsMonitored", "float"]}
mutate {convert => ["iqcfgMediaType", "float"]}
mutate {convert => ["iqcfgBandwidth", "float"]}
mutate {convert => ["iqigmpJoinTime", "float"]}
mutate {convert => ["iqmlt15", "float"]}
mutate {convert => ["iqmlrMax", "float"]}
mutate {convert => ["iqmls15", "float"]}
mutate {convert => ["iqrtpLossEventCount", "float"]}
mutate {convert => ["iqrtpLossPacketCount", "float"]}
mutate {convert => ["iqrtpLs", "float"]}
mutate {convert => ["iqess", "float"]}
mutate {convert => ["iqsess", "float"]}
mutate {convert => ["iquass", "float"]}
mutate {convert => ["iqscanSeconds", "float"]}
mutate {convert => ["iqscanCount", "float"]}
mutate {convert => ["iqscanFails", "float"]}
mutate {convert => ["iqminSnr15", "float"]}
mutate {convert => ["iqerrorsRsco", "float"]}
mutate {convert => ["iqerrorsRsunco", "float"]}
mutate {convert => ["iqerrorsRsco24", "float"]}
mutate {convert => ["iqerrorsRsunco24", "float"]}
mutate {convert => ["iqsdvBandwidthMin", "float"]}
mutate {convert => ["iqsdvBandwidthMax", "float"]}
mutate {convert => ["iqsdvBandwidthAvg", "float"]}
mutate {convert => ["iqsdvMode", "float"]}
mutate {convert => ["iqsdvConfigMaxBw", "float"]}
mutate {convert => ["iqminPwr", "float"]}
mutate {convert => ["iqmaxPwr", "float"]}
mutate {convert => ["iqminPreBER", "float"]}
mutate {convert => ["iqmaxPreBER", "float"]}
mutate {convert => ["iqavgPreBER", "float"]}
mutate {convert => ["iqminPostBER", "float"]}
mutate {convert => ["iqmaxPostBER", "float"]}
mutate {convert => ["iqavgPostBER", "float"]}
mutate {convert => ["iqvtsbMax", "float"]}
mutate {convert => ["iqvtsbMin", "float"]}
mutate {convert => ["iqProgramCount", "float"]}
mutate {convert => ["iqProgramsMonitored", "float"]}
mutate {convert => ["iqProgramsFaulted", "float"]}
mutate {convert => ["iqStuffingBitRateMin", "float"]}
mutate {convert => ["iqStuffingBitRateMax", "float"]}
mutate {convert => ["iqStuffingBitRateAvg", "float"]}
mutate {convert => ["iqunreferencedPidCount", "float"]}
mutate {convert => ["iqtos", "float"]}
mutate {convert => ["iqtosChanges15", "float"]}
mutate {convert => ["iqtosChanges24", "float"]}
mutate {convert => ["iqmaxSnr15", "float"]}
mutate {convert => ["iqavgSnr15", "float"]}


#remove translated field for cleanup
mutate { remove_field => [ "post-a-translate" ] }


ruby {
    code => "event['iqflowDf'] = event['iqflowDf']/1000"

	}

  }
}
